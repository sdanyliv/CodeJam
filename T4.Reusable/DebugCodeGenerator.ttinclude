<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ include file="Transform.ttinclude" #><#+
public void Run()
{
	const string message =
		"The name of the template should follow the pattern 'Debug' + AssertionFile + '.tt'. " +
		"The name of the assertion class should be suffixed with 'Code'. " +
		"For example, for Code.cs the template should be named DebugCode.tt " +
		"and for EnumerableCode.cs the template should be named DebugEnumerableCode.tt.";

	var newClassName = Path.GetFileNameWithoutExtension(Host.TemplateFile);
	if (!newClassName.StartsWith("Debug", StringComparison.Ordinal) ||
		!newClassName.EndsWith("Code", StringComparison.Ordinal))
	{
		throw new InvalidOperationException("File " + newClassName + ": " + message);
	}

	var oldClassName = newClassName.Substring("Debug".Length);
	var oldClassPath = Host.ResolvePath(oldClassName + ".cs");
	if (!File.Exists(oldClassPath))
	{
		throw new FileNotFoundException("File '" + oldClassPath + "' does not exist");
	}

	WriteLine(@"using static CodeJam.DebugCode;");
	WriteLine("");

	Transform(Host.ResolvePath(oldClassPath),
		new ReplaceInfo { Pattern = "class " + Regex.Escape(oldClassName), Replacement = "class " + newClassName },
		new ReplaceInfo { Pattern = Regex.Escape("[DebuggerHidden"),       Replacement = "[Conditional(DebugCondition), DebuggerHidden" });
}
#>
