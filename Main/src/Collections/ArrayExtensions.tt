<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".generated.cs" #>
using System;

using CodeJam.Utilities;

using JetBrains.Annotations;

namespace CodeJam.Collections
{
	partial class ArrayExtensions
	{
		#region string
<# GenerateMethod("string"); #>
		#endregion
<#
	foreach (var type in new[] { "byte", "sbyte", "short", "ushort", "int", "uint", "long", "ulong" })
	{
#>

		#region <#= type #>
<#
		GenerateUnsafeMethod(type);
		GenerateNullableMethod(type);
#>
		#endregion
<#
	}

	foreach (var type in new[] { "float", "double", "decimal", "TimeSpan", "DateTime", "DateTimeOffset" })
	{
#>

		#region <#= type #>
<#
		GenerateMethod(type);
		GenerateNullableMethod(type);
#>
		#endregion
<#
	}
#>
	}
}
<#+
public void GenerateMethod(string type)
{
#>
		/// <summary>
		/// Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
		/// </summary>
		/// <param name="a">The first array to compare.</param>
		/// <param name="b">The second array to compare.</param>
		[Pure]
		public static bool EqualsTo([CanBeNull] this <#= type #>[] a, [CanBeNull] <#= type #>[] b)
		{
			if (a == b)
				return true;

			if (a == null || b == null)
				return false;

			if (a.Length != b.Length)
				return false;

			for (var i = 0; i < a.Length; i++)
				if (a[i] != b[i])
					return false;

			return true;
		}
<#+
}
#>
<#+
public void GenerateNullableMethod(string type)
{
#>

		/// <summary>
		/// Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
		/// </summary>
		/// <param name="a">The first array to compare.</param>
		/// <param name="b">The second array to compare.</param>
		[Pure]
		public static bool EqualsTo([CanBeNull] this <#= type #>?[] a, [CanBeNull] <#= type #>?[] b)
		{
			if (a == b)
				return true;

			if (a == null || b == null)
				return false;

			if (a.Length != b.Length)
				return false;

			for (var i = 0; i < a.Length; i++)
			{
				var lhs = a[i];
				var rhs = b[i];
				if (lhs.GetValueOrDefault() != rhs.GetValueOrDefault() || lhs.HasValue != rhs.HasValue)
					return false;
			}

			return true;
		}
<#+
}
#>
<#+
public void GenerateUnsafeMethod(string type)
{
#>
		/// <summary>
		/// Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
		/// </summary>
		/// <param name="a">The first array to compare.</param>
		/// <param name="b">The second array to compare.</param>
		[Pure]
		public static unsafe bool EqualsTo([CanBeNull] this <#= type #>[] a, [CanBeNull] <#= type #>[] b)
		{
			if (a == b)
				return true;

			if (a == null || b == null)
				return false;

			if (a.Length != b.Length)
				return false;

			if (a.Length < 5)
			{
				for (var i = 0; i < a.Length; i++)
					if (a[i] != b[i])
						return false;

				return true;
			}

			fixed (void* pa = a, pb = b)
				return Memory.Compare((byte*)pa, (byte*)pb, a.Length * sizeof(<#= type #>));
		}
<#+
}
#>
