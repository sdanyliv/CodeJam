<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Linq.Expressions" #>
<#@ import namespace="System.Text" #>
<#
var ops =
	new []
	{
		new OpInfo(true, "UnaryMinus", "-", ExpressionType.Negate, false),
		new OpInfo(true, "OnesComplement", "~", ExpressionType.OnesComplement, true),

		new OpInfo(false, "Plus", "+", ExpressionType.Add, false),
		new OpInfo(false, "Minus", "-", ExpressionType.Subtract, false),
		new OpInfo(false, "Mul", "*", ExpressionType.Multiply, false),
		new OpInfo(false, "Div", "/", ExpressionType.Divide, false),
		new OpInfo(false, "Modulo", "%", ExpressionType.Modulo, true),
		new OpInfo(false, "Xor", "^", ExpressionType.ExclusiveOr, true),
		new OpInfo(false, "BitwiseAnd", "&", ExpressionType.And, true),
		new OpInfo(false, "BitwiseOr", "|", ExpressionType.Or, true),
		new OpInfo(false, "LeftShift", "<<", ExpressionType.LeftShift, true),
		new OpInfo(false, "RightShift", ">>", ExpressionType.RightShift, true),
	};
#>
<#+
private class OpInfo
{
	public bool Unary { get; private set; }
	public string Name { get; private set; }
	public string Sign { get; private set; }
	public ExpressionType Type { get; private set; }
	public bool IntOnly { get; private set; }
	public OpInfo(bool unary, string name, string sign, ExpressionType type, bool intOnly)
	{
		Unary = unary;
		Name = name;
		Type = type;
		Sign = sign;
		IntOnly = intOnly;
	}
	public string LowerName
	{
		get { return Name.Substring(0, 1).ToLower() + Name.Substring(1); }
	}
}
#>