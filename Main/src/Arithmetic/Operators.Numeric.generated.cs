//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq.Expressions;
using System.Threading;

using JetBrains.Annotations;

using static CodeJam.Arithmetic.OperatorsFactory;

namespace CodeJam.Arithmetic
{
	partial class Operators<T>
	{
		private static readonly Lazy<Func<T, T>> _unaryMinus
			= new Lazy<Func<T, T>>(() => CreateNumUnOperFunc<T>(ExpressionType.Negate), LazyThreadSafetyMode.PublicationOnly);

		/// <summary>
		/// UnaryMinus operator.
		/// </summary>
		[NotNull]
		public static Func<T, T> UnaryMinus => _unaryMinus.Value;


		private static readonly Lazy<Func<T, T>> _onesComplement
			= new Lazy<Func<T, T>>(() => CreateNumUnOperFunc<T>(ExpressionType.OnesComplement), LazyThreadSafetyMode.PublicationOnly);

		/// <summary>
		/// OnesComplement operator.
		/// </summary>
		[NotNull]
		public static Func<T, T> OnesComplement => _onesComplement.Value;


		private static readonly Lazy<Func<T, T, T>> _plus
			= new Lazy<Func<T, T, T>>(() => CreateNumBinOperFunc<T>(ExpressionType.Add), LazyThreadSafetyMode.PublicationOnly);

		/// <summary>
		/// Plus operator.
		/// </summary>
		[NotNull]
		public static Func<T, T, T> Plus => _plus.Value;

		private static readonly Lazy<Func<T, T, T>> _minus
			= new Lazy<Func<T, T, T>>(() => CreateNumBinOperFunc<T>(ExpressionType.Subtract), LazyThreadSafetyMode.PublicationOnly);

		/// <summary>
		/// Minus operator.
		/// </summary>
		[NotNull]
		public static Func<T, T, T> Minus => _minus.Value;

		private static readonly Lazy<Func<T, T, T>> _mul
			= new Lazy<Func<T, T, T>>(() => CreateNumBinOperFunc<T>(ExpressionType.Multiply), LazyThreadSafetyMode.PublicationOnly);

		/// <summary>
		/// Mul operator.
		/// </summary>
		[NotNull]
		public static Func<T, T, T> Mul => _mul.Value;

		private static readonly Lazy<Func<T, T, T>> _div
			= new Lazy<Func<T, T, T>>(() => CreateNumBinOperFunc<T>(ExpressionType.Divide), LazyThreadSafetyMode.PublicationOnly);

		/// <summary>
		/// Div operator.
		/// </summary>
		[NotNull]
		public static Func<T, T, T> Div => _div.Value;

		private static readonly Lazy<Func<T, T, T>> _modulo
			= new Lazy<Func<T, T, T>>(() => CreateNumBinOperFunc<T>(ExpressionType.Modulo), LazyThreadSafetyMode.PublicationOnly);

		/// <summary>
		/// Modulo operator.
		/// </summary>
		[NotNull]
		public static Func<T, T, T> Modulo => _modulo.Value;

		private static readonly Lazy<Func<T, T, T>> _xor
			= new Lazy<Func<T, T, T>>(() => CreateNumBinOperFunc<T>(ExpressionType.ExclusiveOr), LazyThreadSafetyMode.PublicationOnly);

		/// <summary>
		/// Xor operator.
		/// </summary>
		[NotNull]
		public static Func<T, T, T> Xor => _xor.Value;

		private static readonly Lazy<Func<T, T, T>> _bitwiseAnd
			= new Lazy<Func<T, T, T>>(() => CreateNumBinOperFunc<T>(ExpressionType.And), LazyThreadSafetyMode.PublicationOnly);

		/// <summary>
		/// BitwiseAnd operator.
		/// </summary>
		[NotNull]
		public static Func<T, T, T> BitwiseAnd => _bitwiseAnd.Value;

		private static readonly Lazy<Func<T, T, T>> _bitwiseOr
			= new Lazy<Func<T, T, T>>(() => CreateNumBinOperFunc<T>(ExpressionType.Or), LazyThreadSafetyMode.PublicationOnly);

		/// <summary>
		/// BitwiseOr operator.
		/// </summary>
		[NotNull]
		public static Func<T, T, T> BitwiseOr => _bitwiseOr.Value;

		private static readonly Lazy<Func<T, T, T>> _leftShift
			= new Lazy<Func<T, T, T>>(() => CreateNumBinOperFunc<T>(ExpressionType.LeftShift), LazyThreadSafetyMode.PublicationOnly);

		/// <summary>
		/// LeftShift operator.
		/// </summary>
		[NotNull]
		public static Func<T, T, T> LeftShift => _leftShift.Value;

		private static readonly Lazy<Func<T, T, T>> _rightShift
			= new Lazy<Func<T, T, T>>(() => CreateNumBinOperFunc<T>(ExpressionType.RightShift), LazyThreadSafetyMode.PublicationOnly);

		/// <summary>
		/// RightShift operator.
		/// </summary>
		[NotNull]
		public static Func<T, T, T> RightShift => _rightShift.Value;

	}
}