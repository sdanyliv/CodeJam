<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core"
#><#@ include file="Operators.ttinclude"
#><#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq.Expressions" #>
<#@ output extension=".generated.cs"
#>//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq.Expressions;
using System.Threading;

using JetBrains.Annotations;

using static CodeJam.Arithmetic.OperatorsFactory;

namespace CodeJam.Arithmetic
{
	partial class Operators<T>
	{
<#foreach (var op in ops) {
	if (op.Unary) {#>
		private static readonly Lazy<Func<T, T>> _<#=op.LowerName#>
			= new Lazy<Func<T, T>>(() => CreateNumUnOperFunc<T>(ExpressionType.<#=op.Type#>), LazyThreadSafetyMode.PublicationOnly);

		/// <summary>
		/// <#=op.Name#> operator.
		/// </summary>
		[NotNull]
		public static Func<T, T> <#=op.Name#> => _<#=op.LowerName#>.Value;


<#	}#>
<#	else {#>
		private static readonly Lazy<Func<T, T, T>> _<#=op.LowerName#>
			= new Lazy<Func<T, T, T>>(() => CreateNumBinOperFunc<T>(ExpressionType.<#=op.Type#>), LazyThreadSafetyMode.PublicationOnly);

		/// <summary>
		/// <#=op.Name#> operator.
		/// </summary>
		[NotNull]
		public static Func<T, T, T> <#=op.Name#> => _<#=op.LowerName#>.Value;

<#	}#>
<#}#>
	}
}