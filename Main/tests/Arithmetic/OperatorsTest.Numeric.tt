<#@ template debug="false" hostspecific="false" language="C#"
#><#@ assembly name="System.Core"
#><#@ include file="$(SolutionDir)Main\src\Arithmetic\Operators.ttinclude"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Text"
#><#@ import namespace="System.Collections.Generic"
#><#@ output extension=".generated.cs"
#>//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NUnit.Framework;

using IntOp = CodeJam.Arithmetic.Operators<int>;
using NullableDoubleOp = CodeJam.Arithmetic.Operators<double?>;

namespace CodeJam.Arithmetic
{
	partial class OperatorsTest
	{
<#foreach (var op in ops) {
	if (op.Unary) {#>
		[Test]
		public void Int<#=op.Name#>() => Assert.AreEqual(<#=op.Sign#>42, IntOp.<#=op.Name#>(42));

<#		if (!op.IntOnly) {#>
		[Test]
		public void NullableDouble<#=op.Name#>() => Assert.AreEqual(<#=op.Sign#>42f, NullableDoubleOp.<#=op.Name#>(42f));

<#		}#>
<#	}#>
<#	else {#>
		[Test]
		public void Int<#=op.Name#>() => Assert.AreEqual(1 <#=op.Sign#> 2, IntOp.<#=op.Name#>(1, 2));

<#		if (!op.IntOnly) {#>
		[Test]
		public void NullableDouble<#=op.Name#>() => Assert.AreEqual(1f <#=op.Sign#> 2f, NullableDoubleOp.<#=op.Name#>(1, 2));

<#		}#>
<#	}#>
<#}#>
	}
}