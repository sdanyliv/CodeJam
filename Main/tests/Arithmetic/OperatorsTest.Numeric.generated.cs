//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NUnit.Framework;

using IntOp = CodeJam.Arithmetic.Operators<int>;
using NullableDoubleOp = CodeJam.Arithmetic.Operators<double?>;

namespace CodeJam.Arithmetic
{
	partial class OperatorsTest
	{
		[Test]
		public void IntUnaryMinus() => Assert.AreEqual(-42, IntOp.UnaryMinus(42));

		[Test]
		public void NullableDoubleUnaryMinus() => Assert.AreEqual(-42f, NullableDoubleOp.UnaryMinus(42f));

		[Test]
		public void IntOnesComplement() => Assert.AreEqual(~42, IntOp.OnesComplement(42));

		[Test]
		public void IntPlus() => Assert.AreEqual(1 + 2, IntOp.Plus(1, 2));

		[Test]
		public void NullableDoublePlus() => Assert.AreEqual(1f + 2f, NullableDoubleOp.Plus(1, 2));

		[Test]
		public void IntMinus() => Assert.AreEqual(1 - 2, IntOp.Minus(1, 2));

		[Test]
		public void NullableDoubleMinus() => Assert.AreEqual(1f - 2f, NullableDoubleOp.Minus(1, 2));

		[Test]
		public void IntMul() => Assert.AreEqual(1 * 2, IntOp.Mul(1, 2));

		[Test]
		public void NullableDoubleMul() => Assert.AreEqual(1f * 2f, NullableDoubleOp.Mul(1, 2));

		[Test]
		public void IntDiv() => Assert.AreEqual(1 / 2, IntOp.Div(1, 2));

		[Test]
		public void NullableDoubleDiv() => Assert.AreEqual(1f / 2f, NullableDoubleOp.Div(1, 2));

		[Test]
		public void IntModulo() => Assert.AreEqual(1 % 2, IntOp.Modulo(1, 2));

		[Test]
		public void IntXor() => Assert.AreEqual(1 ^ 2, IntOp.Xor(1, 2));

		[Test]
		public void IntBitwiseAnd() => Assert.AreEqual(1 & 2, IntOp.BitwiseAnd(1, 2));

		[Test]
		public void IntBitwiseOr() => Assert.AreEqual(1 | 2, IntOp.BitwiseOr(1, 2));

		[Test]
		public void IntLeftShift() => Assert.AreEqual(1 << 2, IntOp.LeftShift(1, 2));

		[Test]
		public void IntRightShift() => Assert.AreEqual(1 >> 2, IntOp.RightShift(1, 2));

	}
}