<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".generated.cs" #>
using System;
using System.Linq;

using CodeJam.Collections;
using CodeJam.Strings;

using NUnit.Framework;

namespace CodeJam
{
	[TestFixture]
	partial class MinMaxItemTests
	{
<#
	foreach (var info in new[]
	{
		new { Method = "MinBy", Result = "0" },
		new { Method = "MaxBy", Result = "6" },
	})
	{
#>
		#region <#= info.Method #>

<#
		foreach (var type in new[] { "Int32", "Int64", "Single", "Double", "Decimal", "Int16", "SByte", "UInt32", "UInt64", "UInt16", "Byte" })
		{
#>
		#region <#= type #>
		[TestCase(new[] {3, 1, 0, 4, 6}, TestName = "<#= info.Method #> <#= type #> Array",  ExpectedResult = <#= info.Result #>)]
		[TestCase(new[] {1},             TestName = "<#= info.Method #> <#= type #> Single", ExpectedResult = 1)]
		public <#= type #>? <#= info.Method #><#= type #>(int[] source)
			=> source.Select(v => new Item<<#= type #>>((<#= type #>)v)).<#= info.Method #>(i => i.Value)?.Value;

		[TestCase(arg: new int[0])]
		public void <#= info.Method #><#= type #>NoElems(int[] source)
			=> Assert.Throws<InvalidOperationException>(() => source.Select(v => new Item<<#= type #>>((<#= type #>)v)).<#= info.Method #>(i => i.Value));

		[TestCase(new[] {3, 1, 0, 4, 6}, TestName = "<#= info.Method #> <#= type #> Array",  ExpectedResult = <#= info.Result #>)]
		[TestCase(new[] {1},             TestName = "<#= info.Method #> <#= type #> Single", ExpectedResult = 1)]
		[TestCase(new int[0],            TestName = "<#= info.Method #> <#= type #> Empty", ExpectedResult = null)]
		public <#= type #>? <#= info.Method #>OrDefault<#= type #>(int[] source)
			=> source.Select(v => new Item<<#= type #>>((<#= type #>)v)).<#= info.Method #>OrDefault(i => i.Value)?.Value;

		[TestCase(new[] {3, 1, 0, 4, 6}, TestName = "<#= info.Method #> <#= type #> Nullable Array",  ExpectedResult = <#= info.Result #>)]
		[TestCase(new[] {1},             TestName = "<#= info.Method #> <#= type #> Nullable Single", ExpectedResult = 1)]
		public <#= type #>?  <#= info.Method #><#= type #>Nullable(int[] source)
			=> source.Select(v => new Item<<#= type #>?>((<#= type #>)v)).<#= info.Method #>(i => i.Value)?.Value;

		[TestCase(arg: new string[0])]
		[TestCase(arg: new string[] {null, null})]
		public void <#= info.Method #><#= type #>NullableNoElems(string[] source)
			=> Assert.Throws<InvalidOperationException>(() => source.Select(v => new Item<<#= type #>?>((<#= type #>?)(v.ToInt()))).<#= info.Method #>(i => i.Value));

		[TestCase(new[] {3, 1, 0, 4, 6}, TestName = "<#= info.Method #> <#= type #> Nullable Array",  ExpectedResult = <#= info.Result #>)]
		[TestCase(new[] {1},             TestName = "<#= info.Method #> <#= type #> Nullable Single", ExpectedResult = 1)]
		[TestCase(new int[0],            TestName = "<#= info.Method #> <#= type #> Nullable Empty",  ExpectedResult = null)]
		public <#= type #>?  <#= info.Method #>OrDefault<#= type #>Nullable(int[] source)
			=> source.Select(v => new Item<<#= type #>?>((<#= type #>)v)).<#= info.Method #>OrDefault(i => i.Value)?.Value;
		#endregion

<#
		}
#>
		#endregion

<#
	}
#>
	}
}